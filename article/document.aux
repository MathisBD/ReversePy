\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\babel@aux[2]{}
\@nameuse{bbl@beforestart}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\babel@aux{english}{}
\citation{tritondeobfs}
\citation{cpython}
\citation{pypy}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{2}{section.1}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2}Recognizing the VM execution}{2}{section.2}\protected@file@percent }
\citation{intelpin}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Building the CFG}{3}{subsection.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Finding the fetch}{3}{subsection.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.2.1}Basic Method}{3}{subsubsection.2.2.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Transformation of the CFG around call/ret\relax }}{4}{figure.caption.2}\protected@file@percent }
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{fig:callRet}{{1}{4}{Transformation of the CFG around call/ret\relax }{figure.caption.2}{}}
\newlabel{fig:abstractVM:Centralized}{{2a}{4}{Centralized fetch\relax }{figure.caption.3}{}}
\newlabel{sub@fig:abstractVM:Centralized}{{a}{4}{Centralized fetch\relax }{figure.caption.3}{}}
\newlabel{fig:abstractVM:Decentralized}{{2b}{4}{Decentralized fetch ('computed-gotos')\relax }{figure.caption.3}{}}
\newlabel{sub@fig:abstractVM:Decentralized}{{b}{4}{Decentralized fetch ('computed-gotos')\relax }{figure.caption.3}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Examples of VM control flow graphs\relax }}{4}{figure.caption.3}\protected@file@percent }
\newlabel{fig:abstractVM}{{2}{4}{Examples of VM control flow graphs\relax }{figure.caption.3}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.2.2}Using the filtered CFG}{5}{subsubsection.2.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3}Abstract VM model}{5}{section.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Definition}{5}{subsection.3.1}\protected@file@percent }
\newlabel{fig:examplePythonProg:source}{{3a}{6}{Python source code.\relax }{figure.caption.4}{}}
\newlabel{sub@fig:examplePythonProg:source}{{a}{6}{Python source code.\relax }{figure.caption.4}{}}
\newlabel{fig:examplePythonProg:bytecode}{{3b}{6}{Disassembled bytecode.\relax }{figure.caption.4}{}}
\newlabel{sub@fig:examplePythonProg:bytecode}{{b}{6}{Disassembled bytecode.\relax }{figure.caption.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces An example python program, used to generate the graphs in Figures \ref  {fig:concreteVMFiltered} and \ref  {fig:concreteVMOriginal}, along with its disassembly as given by the Python 'dis' module.\relax }}{6}{figure.caption.4}\protected@file@percent }
\newlabel{fig:examplePythonProg}{{3}{6}{An example python program, used to generate the graphs in Figures \ref {fig:concreteVMFiltered} and \ref {fig:concreteVMOriginal}, along with its disassembly as given by the Python 'dis' module.\relax }{figure.caption.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces The function implementing the VM loop in $\mathcal  {C}_{filtered}$, constructed from a trace of CPython running the program in Figure \ref  {fig:examplePythonProg}. Notice how the fetch (movzxw (\%r12), \%edx)) and the dispatch (jmp \%rax) are in the same block (the top-most block), and that this block has relatively few outgoing edges.\relax }}{7}{figure.caption.5}\protected@file@percent }
\newlabel{fig:concreteVMFiltered}{{4}{7}{The function implementing the VM loop in $\mathcal {C}_{filtered}$, constructed from a trace of CPython running the program in Figure \ref {fig:examplePythonProg}. Notice how the fetch (movzxw (\%r12), \%edx)) and the dispatch (jmp \%rax) are in the same block (the top-most block), and that this block has relatively few outgoing edges.\relax }{figure.caption.5}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces The function implementing the VM loop in $\mathcal  {C}$, constructed from the same trace as in Figure \ref  {fig:concreteVMFiltered}. Only the blocks implementing the fetch and the dispatch have their code shown. Notice how the fetch and the dispatch are in different blocks, and that the dispatch has many outgoing edges.\relax }}{8}{figure.caption.6}\protected@file@percent }
\newlabel{fig:concreteVMOriginal}{{5}{8}{The function implementing the VM loop in $\mathcal {C}$, constructed from the same trace as in Figure \ref {fig:concreteVMFiltered}. Only the blocks implementing the fetch and the dispatch have their code shown. Notice how the fetch and the dispatch are in different blocks, and that the dispatch has many outgoing edges.\relax }{figure.caption.6}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Finding the VM state}{9}{subsection.3.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.1}Finding $ip$}{9}{subsubsection.3.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.2}Finding $fp$}{9}{subsubsection.3.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.3}Finding $sp$}{9}{subsubsection.3.2.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.4}Code blocks}{10}{subsubsection.3.2.4}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {4}Opcode semantics}{10}{section.4}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Examples}{10}{subsection.4.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Definition}{11}{subsection.4.2}\protected@file@percent }
\bibcite{tritondeobfs}{1}
\bibcite{cpython}{2}
\bibcite{pypy}{3}
\bibcite{intelpin}{4}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces The list of opcode characterizations obtained with CPython for the program in Figure \ref  {fig:examplePythonProg}.\relax }}{13}{figure.caption.7}\protected@file@percent }
\newlabel{fig:semanticsTable}{{6}{13}{The list of opcode characterizations obtained with CPython for the program in Figure \ref {fig:examplePythonProg}.\relax }{figure.caption.7}{}}
\gdef \@abspage@last{13}
